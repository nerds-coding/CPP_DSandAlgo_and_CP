Data Abstraction is a process of providing only the essential details 
to the outside world and hiding the internal details, i.e., 
representing only the essential details in the program.

Data Abstraction is a programming technique that depends on the seperation 
of the interface and implementation details of the program.


---> Example 
Let's take a real life example of AC, which can be turned ON or OFF, change the 
temperature, change the mode, and other external components such as fan, swing. 
But, we don't know the internal details of the AC, i.e., how it works internally. 
Thus, we can say that AC seperates the implementation details from the external interface.


C++ provides a great level of abstraction. For example, pow() function is used to 
calculate the power of a number without knowing the algorithm the function follows.


In C++ program if we implement class with private and public members 
then it is an example of data abstraction.






Data Abstraction can be achieved in two ways:

- Abstraction using classes
- Abstraction in header files.




-------------------------------- Advantages Of Abstraction ----------------------------------

Implementation details of the class are protected from the inadvertent user level errors.

A programmer does not need to write the low level code.

Data Abstraction avoids the code duplication, i.e., 
programmer does not have to undergo the same tasks 
every time to perform the similar operation.

The main aim of the data abstraction is to reuse the code 
and the proper partitioning of the code across the classes.

Internal implementation can be changed without affecting the user level code.




--------------------- When to use the abstraction -------------------------------------- 

An abstract class is a good choice if we are using the inheritance concept since it 
provides a common base class implementation to derived classes.


An abstract class is also good if we want to declare non-public members. 
In an interface, all methods must be public.

If we want to add new methods in the future, then an abstract class is a better choice. 
Because if we add new methods to an interface, then all of the classes that already 
implemented that interface will have to be changed to implement the new methods.


If we want to create multiple versions of our component, create an abstract class. 
Abstract classes provide a simple and easy way to version our components. 
By updating the base class, all inheriting classes are automatically updated with the change. 
Interfaces, on the other hand, cannot be changed once created. 
If a new version of an interface is required, we must create a whole new interface.


Abstract classes have the advantage of allowing better forward compatibility. 
Once clients use an interface, we cannot change it; if they use an abstract class, 
we can still add behavior without breaking the existing code.


If we want to provide common, implemented functionality among all implementations of 
our component, use an abstract class. Abstract classes allow us to partially 
implement our class, whereas interfaces contain no implementation for any members.



--------------------------------- When to use an interface ------------------------
If the functionality we are creating will be useful across a wide range of disparate objects, 
use an interface. Abstract classes should be used primarily for objects that are closely 
related, whereas interfaces are best suited for providing a common functionality to 
unrelated classes.


Interfaces are a good choice when we think that the API will not change for a while.

Interfaces are also good when we want to have something similar to multiple 
inheritances since we can implement multiple interfaces.

If we are designing small, concise bits of functionality, use interfaces. 
If we are designing large functional units, use an abstract class.